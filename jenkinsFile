if (BRANCH_NAME == "develop") {
    properties(
        [
            pipelineTriggers([cron('0 11 * * *')])
        ]
    )
}

node {
    
    stage('checkout'){
     checkout scm
   }             
    def String cloudconfig_version
    def pom = readMavenPom file: 'pom.xml'
    cloudconfig_version = pom.version      
  docker.image('maven:3.6.3-jdk-8').inside("-u root -v $HOME/.m2:/root/.m2 --entrypoint=''") {
            try {
                 withMaven(maven: 'maven'){                
                    stage('check java') {
                        sh "java -version"
                        sh "mvn -version"
                    }             
                    stage('clean') {
                        sh "chmod +x mvnw"
                        sh "./mvnw clean install -DskipTests"
                    }
                    stage('packaging') {
                    sh "./mvnw clean package -Pprod -DskipTests"
                    archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true                
                    }
      script{
         if(env.BRANCH_NAME == 'develop') {
             stage('docker build'){
                sh "cp ./src/main/docker/Dockerfile ./target/ "
                cloudconfig_version = pom.version
                docker.withRegistry('https://nexus-numeryx.my.p4d.click', 'docker-login') {
                  def dockerImageTag =  "nexus-numeryx.my.p4d.click/business-suite/mac/spring-cloud-configuration-mac:"+cloudconfig_version
                  def dockerImage = docker.build(dockerImageTag, './target/')
                  dockerImage.push()
                    }
                }     
            stage('integration') {
               sshagent (credentials: ['ssh-cluster-app-bs-dev']) {
                       sh "ssh root@10.30.3.228 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o CheckHostIP=no sh /root/deploy.sh cloudconfig_version CLOUDCONFIG_VERSION=${cloudconfig_version} ${cloudconfig_version}"
                  }}    
         }
         else if(env.BRANCH_NAME == 'process-release') {
           def cloudconfigReleaseVersion = input(
                              id: 'userInput', message: 'Enter new release cloudconfig-Service version :',
                              parameters: [
                                      string(defaultValue: '',
                                              description: 'cloudconfig Release version',
                                              name: 'cloudconfig Release Version'),
                              ])
           echo("New release version is: ${cloudconfigReleaseVersion}")
           def cloudconfigDevelopVersion = input(
                              id: 'userInput', message: 'Enter new develop cloudconfig-Service version :',
                              parameters: [
                                      string(defaultValue: '',
                                              description: 'cloudconfig Develop version',
                                              name: 'cloudconfig Develop Version'),
                              ])
            echo("New development version is: ${cloudconfigDevelopVersion}")       
            if(cloudconfigDevelopVersion == ''){
                         throw new Exception("Version should not be null")
            } 
            if(cloudconfigReleaseVersion == ''){
                         throw new Exception("Version should not be null")
            }else if (cloudconfigDevelopVersion == cloudconfigReleaseVersion) {
                         throw new Exception("Release version should be different from snapshot version")
            }else if (cloudconfigDevelopVersion == cloudconfig_version) {
                         throw new Exception("SNAPSHOT version already exists")
            }
         
            stage ("Commit new versions"){
                sshagent (credentials: ['gitlab-ssh-key']) {
                    env.GIT_SSH_COMMAND = "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o CheckHostIP=no"
                        sh """
                          mvn release:clean release:prepare -DdryRun=true release:perform -DreleaseVersion=${cloudconfigReleaseVersion}
                          git config --global user.email ${env.JENKINS_USEREMAIL_GITLAB}
                          git config --global user.name ${env.JENKINS_USERNAME_GITLAB}
                          git checkout -b release
                          git branch
                          git reset --hard HEAD
                          mvn versions:set -DnextRelease=true -DnewVersion=${cloudconfigReleaseVersion}
                          git add .
                          git commit -m "New release version ${cloudconfigReleaseVersion}"
                          git push origin release
                          git checkout develop
                          git branch
                          git reset --hard HEAD
                          git pull origin develop
                          mvn versions:set -DnextRelease=true -DnewVersion=${cloudconfigDevelopVersion}
                          git add .
                          git commit -m "New develop version ${cloudconfigDevelopVersion}"
                          git push origin develop
                          git push origin --delete process-release
                          git branch -D release
                     """        
                 }
              }

         } else if(env.BRANCH_NAME == 'release') {
            stage('docker build'){
                sh "cp ./src/main/docker/Dockerfile ./target/ "
                 cloudconfig_version = pom.version
                docker.withRegistry('https://nexus-numeryx.my.p4d.click', 'docker-login') {
                  def dockerImageTag =  "nexus-numeryx.my.p4d.click/business-suite/mac/spring-cloud-configuration-mac:"+cloudconfig_version
                  def dockerImage = docker.build(dockerImageTag, './target/')
                  dockerImage.push()
                    }
               }
           stage('integration') {
               sshagent (credentials: ['ssh-cluster-app-bs-release']) {
                       sh "ssh root@10.30.3.202 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o CheckHostIP=no sh /root/deploy.sh cloudconfig_version CLOUDCONFIG_VERSION=${cloudconfig_version} ${cloudconfig_version}"
                 }}   
           
        }
         else  if(env.BRANCH_NAME == 'main'){
            cloudconfig_version = pom.version.replace("-RELEASE","-STABLE")     
           stage ("tag new version"){
              sshagent (credentials: ['gitlab-ssh-key']) {
                    env.GIT_SSH_COMMAND = "ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o CheckHostIP=no"
                        sh """
                          git config --global user.email ${env.JENKINS_USEREMAIL_GITLAB}
                          git config --global user.name ${env.JENKINS_USERNAME_GITLAB}
                          git checkout main
                          git reset --hard HEAD
                          git pull origin main
                          mvn versions:set -DnextRelease=true -DnewVersion=${cloudconfig_version}
                          git add .
                          git commit -m "new version ${cloudconfig_version}"
                          git push origin main
                          git tag ${cloudconfig_version}
                          git push origin ${cloudconfig_version} 
                     """ 
               }
              }
            stage('docker build'){
               sh "cp ./src/main/docker/Dockerfile ./target/ "
               docker.withRegistry('https://nexus-numeryx.my.p4d.click', 'docker-login') {
                 def dockerImageTag =  "nexus-numeryx.my.p4d.click/business-suite/mac/spring-cloud-configuration-mac:"+cloudconfig_version
                 def dockerImage = docker.build(dockerImageTag, './target/')
                 dockerImage.push()
              }
                 
           }    
           stage('integration') {
               sshagent (credentials: ['ssh-cluster-app-bs-release']) {
                    sh "ssh root@10.30.3.202 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -o CheckHostIP=no sh /root/deploy.sh cloudconfig_version CLOUDCONFIG_VERSION=${cloudconfig_version} ${cloudconfig_version}"
                 }
                 }   
          } 

         }}
            }
         finally {
                sh "chmod -R 777 ."
            }
  }

  
}
